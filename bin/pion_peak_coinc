#!/usr/bin/env python

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import scipy.optimize as op

def double_gaus(  x , *p ):
    res =  p[0]*gaus( p[1], p[2], x ) + p[3]*gaus( p[4], p[5], x )
    return res

def poly_func(  x , *p ):
    v = ( x - 1640.0 ) 
    res = sum([ par * v**i for i, par in enumerate(p) ])
    return res

def fit_curve( dt, col, fun, par ):
    try:
        p1, success = op.curve_fit( fun, dt['pressure'].values, dt[col].values, par)
    except RuntimeError:
        p1 = None
    print p1
    return p1

raw_dt = pd.read_csv( 'data/pion_peak/pion_pscan.dat', delim_whitespace = True, 
        names = ['pressure', 'hits', 'err', '6fold', '7fold', '8fold' ] )

dt = raw_dt[ (raw_dt['pressure'] > 1600 ) & (raw_dt['pressure'] < 1680 ) ]

pts = np.linspace( 1625, 1660, 100 )

fig = plt.figure( figsize = [8, 6] )
fig.set_tight_layout(True)
ax = fig.add_subplot( 111 )

ax.set_xlim( [1600, 1700])
ax.set_ylim( [0, 1])
ax.grid( 'on' )

for col, clr in zip( ['6fold', '7fold', '8fold' ],['blue', 'magenta', 'green' ] ):
    ax.plot( raw_dt['pressure'], raw_dt[col], 'o', mec = 'None', c = 'k' )
    init_poly_par = [ 1 for x in range(9) ]
    poly_par = fit_curve( dt, col, poly_func, init_poly_par)

    def f_poly(x):
        return poly_func( x, *poly_par )

    if poly_par is not None:
        ax.plot( pts, f_poly( pts ), '-', lw = 2, label = col + ' polynomial fit', c = clr )

handles, labels = ax.get_legend_handles_labels()
plt.legend( handles, labels , loc = 'upper right')

plt.savefig( 'output/pion_peak/coincs.pdf', format = 'pdf', transparent = True )
