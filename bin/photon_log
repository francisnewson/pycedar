#!/usr/bin/env python
import pandas as pd
import numpy as np
import sys
import progressbar
import matplotlib.pyplot as plt

def process_photon_log( input_file ):
    data = pd.read_csv( input_file , delim_whitespace = True )

    max_rows = len(data) / 2
    current_row = 0

    result = pd.DataFrame( index = np.arange( 0, max_rows), columns = ( 'pmt', 'x', 'y' ) )

    event_group = data.groupby( 'EventNb' )
    events = ( x for x in event_group )

    n_events =  len( event_group ) 
    print( "Processing {0} events".format( n_events ) )

    with progressbar.ProgressBar( maxval = len( event_group ) )as pb:
        try:
            for EventNb, event in events:
                pb.update( EventNb )

                track_list = [{"x":None, "y":None, "pmt":None} 
                        for  i in range(event['TrackID'].max() +1 ) ]

                for n,hit in event.iterrows():
                    trackid = int(hit['TrackID'])
                    track_map = track_list[trackid]
                    copy = int(hit['Copy'])
                    if ( copy < 100 ):
                        pass
                        track_map['x'] = float(hit['PosX'])
                        track_map['y'] = float(hit['PosY'])
                    if ( copy > 100 ):
                        pass
                        track_map['pmt'] = copy

                for track in track_list:
                    if track['pmt'] and track['x'] and track['y']:
                        result.loc[current_row] = [ track['pmt'], track['x'], track['y'] ]
                        current_row += 1

        except KeyboardInterrupt:
            pass

    trunc_result = result.loc[ 0 : current_row ]
    trunc_result.sort( 'pmt', inplace = True )
    return trunc_result

#data_set = process_photon_log('data/photon_log/real_beam.txt')
#data_set.to_pickle( 'cache/photon_log/real_beam.pck' )

data_set = pd.io.pickle.read_pickle( 'cache/photon_log/real_beam.pck' ).dropna()

sector_8 = data_set[ ( data_set['pmt'].astype( int ) - data_set['pmt'].astype( int ) % 100) == 800 ] 
print( sector_8 )

fig = plt.figure( figsize = [8, 6] )
fig.set_tight_layout(True)

ax = fig.add_subplot( 111 )

ax.set_xlabel( 'x (cm)' )
ax.set_ylabel( 'y (cm)' )
ax.set_title( 'Position at diaphragm'  )

ax.set_ylim( 95, 100 )
ax.set_xlim( 10, 30 )

print( sector_8['pmt'].values )

plotted = ax.scatter( sector_8['x'].values, sector_8['y'].values, c = sector_8['pmt'].astype( float ),
        cmap = 'Set1', edgecolor = 'None' )
cbar = plt.colorbar( mappable = plotted )

plt.savefig( 'output/visualize/diaphragm.pdf', format = 'pdf', transparent = 'true' )
