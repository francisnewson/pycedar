#!/usr/bin/env python
import pycedar
import matplotlib.pyplot as plt
import numpy as np
import sys
import gzip
import math

print( 'Loading PMT Test Sheet:' )
test_sheet = pycedar.load_test_sheet( open( 'params/pmt_test_sheet.dat' ) )
print( 'Loading PMT positions:' )
pmt_pos = pycedar.load_pmt_positions( open( 'params/pmt_positions.dat' ) )

print( 'PMT efficiency by type' )
mean_blue_sens = test_sheet.groupby( pycedar.get_pmt_type )['cathode_blue_sens'].mean() 
print ( mean_blue_sens)

print( 'Blue correction by position' )
pos_blue_correction = pycedar.get_pos_blue_corr( pmt_pos, test_sheet, 'cathode_luminous_sens' )

print( pos_blue_correction[ pos_blue_correction['blue_corr'] < 0.9 ] )

crit = pos_blue_correction['blue_corr'].map( lambda x : np.isnan( x ))
print( pos_blue_correction[crit] )

fig = plt.figure( figsize = [8, 6] )
ax = fig.add_subplot( 111 )
ax.grid( True )

pos_blue_correction['pmt_type'] = pos_blue_correction.serial_number.apply( pycedar.get_pmt_type )

for (pmt_type, data), color in zip( pos_blue_correction.groupby( 'pmt_type' ), ['LightGreen', 'DarkCyan'] ):
    n, bins, patches = plt.hist( data['blue_corr'].dropna().values, histtype = 'stepfilled',
             edgecolor = color, fill  = None, lw = 4, label = pmt_type)

handles, labels = ax.get_legend_handles_labels()
plt.legend( handles, labels , loc = 'upper left')

fig.set_tight_layout(True)
ax.set_xlabel( 'Blue sensitivity correction' )
plt.savefig( 'output/blue_corrections.pdf', format = 'pdf', transparent = 'true' )

print ('Loading PMT hit data:' )
pmt_hit_data = pycedar.load_templates_csv( gzip.open( 'data/alignment_data.csv.gz' ) )

print( 'Correcting PMT hit data:' )
blue_corr_mod = 1
blue_corr_pmt_hit_data = pmt_hit_data *  pos_blue_correction['blue_corr'].apply(
        lambda x: ( x-1 )/blue_corr_mod + 1)

print( 'Calculate raw per octant corrections:' )
octant_hits = pmt_hit_data.loc[20000, 0, 0].groupby( pycedar.get_octant ).sum()
corrections = octant_hits.mean() / octant_hits
corr_stat_err = pycedar.get_octant_corr_stat_err( octant_hits )

print( 'Calculate blue index corrected per octant corrections:' )
blue_corr_octant_hits = blue_corr_pmt_hit_data.loc[20000, 0, 0].groupby( pycedar.get_octant ).sum()
blue_corr_corrections = blue_corr_octant_hits.mean() / blue_corr_octant_hits
blue_corr_stat_err = pycedar.get_octant_corr_stat_err( octant_hits  )

data_fit = [ 1.017, 0.999, 1.017, 0.999, 0.99, 0.962, 1.017, 0.999 ]
octant_list = range( 1, 9 )
print ('Using data values: {0}'.format( data_fit ) )

#set up plot
fig = plt.figure( figsize = [8,6])
ax =  fig.add_subplot(111)

plt.axis( [0.5, 8.5, 0.94, 1.06 ] )
ax.grid(True)
fig.set_tight_layout(True)

ax.plot( octant_list, data_fit, '-s', color = 'DarkRed',  label = 'Values from data' )
ax.set_xlabel( 'Per octant rescaling factor' )

ax.errorbar( corrections.index, corrections.values, color = 'DarkGreen',
        yerr = corr_stat_err, label = 'No Blue index simulation', fmt = '-^', capthick = 2 )

handles, labels = ax.get_legend_handles_labels()
plt.legend( handles, labels , loc = 'upper right')

plt.savefig( 'output/raw_octant_correction.pdf', format = 'pdf', transparent = 'true' )

ax.errorbar( blue_corr_corrections.index, blue_corr_corrections.values, color = 'DarkCyan',
        yerr = blue_corr_stat_err, label = 'With Rescaled Blue index simulation' , fmt = '-o', capthick = 2)


handles, labels = ax.get_legend_handles_labels()
plt.legend( handles, labels , loc = 'upper right')
plt.savefig( 'output/octant_correction.pdf', format = 'pdf', transparent = 'true' )

plt.close()
