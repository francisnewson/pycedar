#!/usr/bin/env python

import pandas as pd
from scipy import interpolate
import pycedar
import numpy as np
import gzip
import logging
import cProfile
import matplotlib.pyplot as plt
from pandas.computation import expressions as expr
import sys

expr.set_use_numexpr(False )

logging.basicConfig( level = logging.DEBUG )

cols = [ xrange(-1400, 1200, 200), xrange( -1400, 1200, 200 ) ]
myindex =pd.MultiIndex.from_product( cols, names = ['x', 'y'] )

mydiaphragm = 1000
myslice = 1000

#Load template datasets
data_set_string = 'data/align_csv/kaonp_1710_{d}_{s}.csv.gz'
all_pmt_template_data = pycedar.load_templates_csv( 
        gzip.open( data_set_string.format( d = mydiaphragm, s = 42 ) ) ).loc[mydiaphragm, :, : ]

#Restrict to my slice
pmt_template_data = all_pmt_template_data.loc[(slice(-(myslice+400),myslice+400), slice(-(myslice+400),myslice+400)), :]
coarse_template_data =  pmt_template_data.loc[myindex] 

#Load test datasets
all_pmt_test_data = pycedar.load_templates_csv( 
        gzip.open( data_set_string.format( d = mydiaphragm, s = 52 ) ) ).loc[mydiaphragm, : :]

pmt_test_data = all_pmt_test_data.loc[(slice(-myslice,myslice), slice(-myslice,myslice)), :]

#Run tests
chi2_aligner = pycedar.Chi2Aligner(groups = pycedar.get_chi2_sixths(), errfun = pycedar.default_errfun )

chi2_aligner.set_templates( coarse_template_data )
chi2_aligner.prepare_templates()
indi_test = chi2_aligner.extract_group_totals( pmt_test_data.loc[-450, 650 ] )
result = chi2_aligner.compute_alignment( indi_test )
best = chi2_aligner.best_xy()

f = interpolate.interp2d( result['x'], result['y'], result['chi2'], kind = 'cubic' )

full_x = pd.Series( np.arange( best[0] - 200, best[0] + 200,  5 ), name = 'x' )
full_y = pd.Series( np.arange( best[1] - 200, best[1] + 200,  5 ), name = 'y' )
full_z = f( full_x, full_y )

full = pd.DataFrame( pd.DataFrame( full_z, index = full_x ,  columns = full_y   ).stack() ).reset_index()
full.columns = ['x','y','chi2']

#print( full )
print( best )
print(full.loc[ full['chi2'].idxmin() ] )

chi2_aligner.interpolate = True
new_result = chi2_aligner.compute_alignment( indi_test )
print( chi2_aligner.best_xy() )

#result.set_index( ['x', 'y'], inplace = True )
#print ( result )
#print( pmt_test_data.index )
#interpolated_result = result.reindex( pmt_test_data.index, inplace = True ).interpolate( method = 'spline' )

#result.interpolate( method = 'values', 



#cProfile.run( 'chi2_results = pycedar.test_aligner( chi2_aligner, coarse_template_data, pmt_test_data )', 
#'log/test_course_chi2_stats' )

print( 'Plotting')
fig = plt.figure( figsize = [8, 6] )
fig.set_tight_layout(True)
ax = fig.add_subplot( 111 )

plotted = ax.scatter( full['x'], full['y'], c = full['chi2'], marker = 's', edgecolor = 'None' )
cbar = plt.colorbar( mappable = plotted )
plt.savefig( 'output/chi2/interp.pdf', format = 'pdf', transparent = 'true' )
cbar.remove()
ax.cla()

plotted = ax.scatter( result['x'], result['y'], c = result['chi2'], marker = 's', edgecolor = 'None' )
cbar = plt.colorbar( mappable = plotted )
plt.savefig( 'output/chi2/raw_interp.pdf', format = 'pdf', transparent = 'true' )



sys.exit()

plotted =  ax.scatter( chi2_results['x'], chi2_results['y'], c = chi2_results['dx'],
        cmap = pycedar.blind_colormap( 'Spectral', 'widecm', 0.1 ),
        marker = 's', edgecolor = 'None' )

cbar = plt.colorbar( mappable = plotted )

ax.set_xlim( -1000, 1000 )
ax.set_ylim( -1000, 1000 )

ax.yaxis.set_major_formatter(pycedar.format_mm)
ax.xaxis.set_major_formatter(pycedar.format_mm)

ax.set_xlabel( 'x (mm)')
ax.set_ylabel( 'y (mm)')

plt.savefig( 'output/chi2/coarse.pdf', format = 'pdf', transparent = 'true' )
