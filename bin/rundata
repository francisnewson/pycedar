#!/usr/bin/env python
import pycedar
import gzip
import pandas as pd
import logging
import matplotlib.pyplot as plt
import cProfile
import sys
import numpy as np
import os.path as osp
import os
import errno
import argparse
import yaml

def set_up_ax( ax, myrange ):
    ax.grid( True )
    ax.set_xlim( -myrange, myrange )
    ax.set_ylim( -myrange, myrange )

    ax.yaxis.set_major_formatter(pycedar.format_mm)
    ax.xaxis.set_major_formatter(pycedar.format_mm)

    ax.set_xlabel( 'x (mm)')
    ax.set_ylabel( 'y (mm)')

widecm = pycedar.blind_colormap( 'BrBG', 'widecm', 0.1 )
plt.register_cmap( cmap = widecm )

widedcm = pycedar.blind_colormap( 'Spectral', 'widedcm', 0.1 )
plt.register_cmap( cmap = widedcm )

def plot_test_results( ax, test_results, column, cmap , dictargs ):
    return ax.scatter( test_results['x'], test_results['y'], c = test_results[column],
            cmap = plt.get_cmap( cmap ), marker = 's', edgecolor = 'None' , **dictargs )

def mkdir_p(path):
    '''Simulates the shell command mkdir -p'''
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

#--------------------------------------------------#
#                                                  #
#                      MAIN                        #
#                                                  #
#--------------------------------------------------#

logging.basicConfig( level = logging.DEBUG )

#get input parameters
parser = argparse.ArgumentParser()
parser.add_argument( 'config_file', help = 'config yaml file' )

args = parser.parse_args()
sys.stderr.write( "Reading from {0}\n".format( args.config_file ) )

print ( args )

#load config file
config_file = open ( args.config_file )
config = yaml.load( config_file )

#--------------------------------------------------#
# CONFIG
#--------------------------------------------------#

logging.info('Reading config' )

plot_range = config['chi2']['plot_range']
search_radius = config['chi2']['search_range']

mydiaphragm = config['templates']['diaphragm']
template_data_file = config['templates']['template_file']
ignore_pmts = config['templates']['ignore_pmts']

wide_template_data = config['asym']['wide_template_file']
wide_diaphgram = config['asym']['wide_diaphragm']

spline_templates =  config['asym']['spline_templates']
spline_diaphragm = config['asym']['spline_diaphragm']
spline_smoothing =  config['asym']['spline_smoothing']
spline_step = config['asym']['spline_step']
spline_range =  config['asym']['spline_range']

template_slice = slice( -(search_radius+200 ), search_radius + 200 )

real_data_file = config['files']['data']
output_prefix = config['files']['output_prefix']
mkdir_p( output_prefix )

#--------------------------------------------------
# IMPORT DATA
#--------------------------------------------------

logging.info('Importing data' )

#Load template and test datasets
all_pmt_template_data = pycedar.load_templates_csv( 
        gzip.open( template_data_file ), ignore_pmts = ignore_pmts ).loc[mydiaphragm, :, : ]

#Restrict to my slice
pmt_template_data = all_pmt_template_data.loc[ (template_slice, template_slice) , :]

#Load wide dataset for asym corrections
wide_data = pycedar.load_templates_csv( 
        gzip.open( wide_template_data ), ignore_pmts = ignore_pmts ).loc[wide_diaphgram, :, : ] 

#load templates for splines
spline_templates = pycedar.load_templates_csv( spline_templates, ignore_pmts = ignore_pmts ).loc[ spline_diaphragm, :, :]

#load DATA
real_data =  pycedar.load_templates_csv( open( real_data_file ),
        index_col = 'index' , ignore_pmts = ignore_pmts )

#--------------------------------------------------
# SETUP PLOTTING
#--------------------------------------------------

logging.info('Preparing plot canvas' )

fig = plt.figure( figsize = [8, 6] )
fig.set_tight_layout(True)
ax = fig.add_subplot( 111 )

#--------------------------------------------------
# CHI2 ALIGNER
#--------------------------------------------------

logging.info('CHI2 ALIGNER' )

chi2_aligner = pycedar.Chi2Aligner(
        groups = pycedar.get_chi2_sixths(), errfun = pycedar.default_errfun )

logging.info('Preparing templates' )
chi2_aligner.set_templates( pmt_template_data )
chi2_aligner.prepare_templates()

chi2_aligner_data = chi2_aligner.prepare_data_sets(real_data) 

#raw alignment
logging.info('Computing alignment' )
chi2_aligner.compute_alignment( chi2_aligner_data.loc['data'] )
print( '{0:20}: {1}'.format( "CHI2", chi2_aligner.best_xy() ))

#interpolated alignment
chi2_aligner.interpolate = True
chi2_aligner.compute_alignment( chi2_aligner_data.loc['data'] )
print( '{0:20}: {1}'.format( "CHI2(interpolated)", chi2_aligner.best_xy() ))

#plot chi2 plot
logging.info('Plotting chi2 results' )
dtchi2 = chi2_aligner.last_result
set_up_ax( ax, 1000 )

minlnchi2 = np.log( dtchi2['chi2'].min() )
plotted = ax.scatter( dtchi2['x'], dtchi2['y'], c =  np.log(dtchi2['chi2'] ),
        marker = 's', s = 75 , edgecolor = 'None',
        cmap = 'YlGnBu_r', vmin = minlnchi2 , vmax = minlnchi2+0.2 )

cbar = plt.colorbar( mappable = plotted )

chi2_plot_file = osp.join( output_prefix, 'chi2_2d.pdf' )
plt.savefig( chi2_plot_file , format = 'pdf', transparent  = 'true' )
cbar.remove()
plt.cla()

#--------------------------------------------------
# ASYM ALIGNER
#--------------------------------------------------
logging.info('ASYM ALIGNER' )

asym_aligner = pycedar.AsymAligner( wideset = wide_data, 
        spline_range = spline_range, spline_smoothing = spline_smoothing,
        spline_step = spline_step )

logging.info('Preparing templates' )
asym_aligner.set_templates( spline_templates )
asym_aligner.prepare_templates()

asym_aligner_data = asym_aligner.prepare_data_sets(real_data)

logging.info('Computing alignment' )
print( asym_aligner_data.loc['data'] )
asym_aligner.compute_alignment( asym_aligner_data.loc['data'] )
print( '{0:20}: {1}'.format( "ASYM", asym_aligner.best_xy() ))

#plot assymetry curves
logging.info('Plotting asym results' )
fig.set_size_inches( 6, 6, )

asym_aligner.plot_xinvspline( ax )
xspline_plot_file = osp.join( output_prefix, 'xspline.pdf' )
plt.savefig( xspline_plot_file , format = 'pdf', transparent  = 'true' )
plt.cla()

asym_aligner.plot_yinvspline( ax )
yspline_plot_file = osp.join( output_prefix, 'yspline.pdf' )
plt.savefig( yspline_plot_file , format = 'pdf', transparent  = 'true' )
plt.cla()

#--------------------------------------------------
#GEOM ALIGNER
#--------------------------------------------------

logging.info('GEOM ALIGNER' )

geom_aligner = pycedar.GeomAligner()

geom_aligner.set_templates( pmt_template_data )
geom_aligner.prepare_templates()

geom_aligner_data = geom_aligner.prepare_data_sets(real_data) 

print( geom_aligner_data )
geom_aligner.compute_alignment( geom_aligner_data.loc['data'] )
print( '{0:20}: {1}'.format( "GEOM", geom_aligner.best_xy() ))

plotted =  geom_aligner.plot_hitmap( ax, real_data )
cbar = plt.colorbar( mappable = plotted )
hitmap_plot_file = osp.join( output_prefix, 'hitmap.pdf' )
plt.savefig( hitmap_plot_file , format = 'pdf', transparent = 'true' )

cbar.remove()
plt.cla()



#--------------------------------------------------
# MISCELLANEOUS PLOTS
#--------------------------------------------------

logging.info('Extra plots') 
pycedar.plot_dataset(ax, real_data.loc['data'] )
fig.set_size_inches( 20, 6, )
hist_plot_file = osp.join( output_prefix, 'hist.pdf' )
plt.savefig( hist_plot_file , format = 'pdf', transparent = 'true' )
