#!/usr/bin/env python
import pycedar
import gzip
import pandas as pd
import logging
import matplotlib.pyplot as plt
import cProfile
import sys
import numpy as np

def set_up_ax( ax, myrange ):
    ax.grid( True )
    ax.set_xlim( -myrange, myrange )
    ax.set_ylim( -myrange, myrange )

    ax.yaxis.set_major_formatter(pycedar.format_mm)
    ax.xaxis.set_major_formatter(pycedar.format_mm)

    ax.set_xlabel( 'x (mm)')
    ax.set_ylabel( 'y (mm)')

widecm = pycedar.blind_colormap( 'BrBG', 'widecm', 0.1 )
plt.register_cmap( cmap = widecm )

widedcm = pycedar.blind_colormap( 'Spectral', 'widedcm', 0.1 )
plt.register_cmap( cmap = widedcm )

def plot_test_results( ax, test_results, column, cmap , dictargs ):
    return ax.scatter( test_results['x'], test_results['y'], c = test_results[column],
            cmap = plt.get_cmap( cmap ), marker = 's', edgecolor = 'None' , **dictargs )

logging.basicConfig( level = logging.DEBUG )

#CONFIG
myslice = 1400
mydiaphragm = 1500
spline_smoothing = 80
plot_range = 1200

#Load template and test datasets
data_set_string = 'data/align_csv/kaonp_1710_{d}_{s}.csv.gz'
all_pmt_template_data = pycedar.load_templates_csv( 
        gzip.open( data_set_string.format( d = mydiaphragm, s = 42 ) ), ignore_pmts = [176] ).loc[mydiaphragm, :, : ]

#Restrict to my slice
pmt_template_data = all_pmt_template_data.loc[(slice(-(myslice+200),myslice+200), slice(-(myslice+200),myslice+200)), :]

#Load wide dataset for asym corrections
wide_data = pycedar.load_templates_csv( 
        gzip.open( 'data/align_csv/kaonp_1710_20000_42.csv.gz' ), ignore_pmts = [176] ).loc[20000, :, : ] 

#load templates for splines
spline_templates = pycedar.load_templates_csv( 'data/align_csv/kaonp_1710_1500_splines.csv.gz' ).loc[1500, :, :]

chi2_aligner = pycedar.Chi2Aligner(groups = pycedar.get_chi2_sixths(), errfun = pycedar.default_errfun )
asym_aligner = pycedar.AsymAligner( wideset = wide_data, spline_range = myslice, spline_smoothing = spline_smoothing )
geom_aligner = pycedar.GeomAligner()

real_data =  pycedar.load_templates_csv( open('data/dt2014/run1322.dat'), ignore_pmts = [176], index_col = 'index' )

asym_aligner_data = asym_aligner.prepare_data_sets(real_data) 
asym_aligner.set_templates( spline_templates )
asym_aligner.prepare_templates()
asym_aligner.compute_alignment( asym_aligner_data.loc['data'] )

print( asym_aligner_data.loc['data'] )
print( 'ASYM: {0}'.format(asym_aligner.best_xy() ))

chi2_aligner.set_templates( pmt_template_data )
print( real_data.index )
chi2_aligner_data = chi2_aligner.prepare_data_sets(real_data) 

chi2_aligner.prepare_templates()
chi2_aligner.compute_alignment( chi2_aligner_data.loc['data'] )
print( 'CHI2: {0}'.format(chi2_aligner.best_xy() ))

chi2_aligner.interpolate = True

print( real_data.index )
chi2_aligner.compute_alignment( chi2_aligner_data.loc['data'] )
print( 'CHI2(interpolated) {0}'.format(chi2_aligner.best_xy() ))

geom_aligner_data = geom_aligner.prepare_data_sets(real_data) 
geom_aligner.set_templates( pmt_template_data )
geom_aligner.prepare_templates()
geom_aligner.compute_alignment( geom_aligner_data.loc['data'] )
print( 'GEOM: {0}'.format(geom_aligner.best_xy() ) )

fig = plt.figure( figsize = [8, 6] )
fig.set_tight_layout(True)
ax = fig.add_subplot( 111 )

dtchi2 = chi2_aligner.last_result

set_up_ax( ax, 1000 )

print( np.log(dtchi2['chi2'] ).min() )

minlnchi2 = np.log( dtchi2['chi2'].min() )

plotted = ax.scatter( dtchi2['x'], dtchi2['y'], c =  np.log(dtchi2['chi2'] ),
        marker = 's', s = 75 , edgecolor = 'None',
        cmap = 'YlGnBu_r', vmin = minlnchi2 , vmax = minlnchi2+0.2 )

cbar = plt.colorbar( mappable = plotted )

plt.savefig( 'output/real_data.pdf', format = 'pdf', transparent  = 'true' )



cbar.remove()
plt.cla()
fig.set_size_inches( 6, 6, )

asym_aligner.plot_xinvspline( ax )
plt.savefig( 'output/real_data_xspline.pdf', format = 'pdf', transparent  = 'true' )

plt.cla()
asym_aligner.plot_yinvspline( ax )
plt.savefig( 'output/real_data_yspline.pdf', format = 'pdf', transparent  = 'true' )

plt.cla()

pycedar.plot_dataset(ax, real_data.loc['data'] )
fig.set_size_inches( 20, 6, )
plt.savefig( 'output/real_data_hist.pdf', format = 'pdf', transparent = 'true' )
